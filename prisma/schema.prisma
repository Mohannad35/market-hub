// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

type Image {
  public_id  String
  secure_url String
}

type Item {
  quantity   Int
  priceAfter Float
  product    String @db.ObjectId
}

// Pick<PhoneNumber, "number" | "country" | "nationalNumber" | "countryCallingCode"> | null
type Phone {
  number             String
  country            String
  nationalNumber     String
  countryCallingCode String
}

enum Role {
  user
  admin
  vendor
  support
}

enum CouponType {
  admin
  vendor
}

enum Status {
  pending
  processing
  shipped
  delivered
  canceled
}

enum RequestStatus {
  pending
  processing
  accepted
  canceled
}

enum Gender {
  male
  female
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String    @unique
  email           String    @unique
  emailVerified   DateTime?
  password        String?
  avatar          String?
  image           Image?
  phoneNumber     Phone?
  address         String?
  birthday        DateTime?
  businessAddress String?
  websiteAddress  String?
  tokens          Token[]
  role            Role      @default(user)
  isBanned        Boolean   @default(false)
  isAdmin         Boolean   @default(false)
  isVendor        Boolean   @default(false)
  isSupport       Boolean   @default(false)
  isVerified      Boolean   @default(false)
  gender          Gender?
  accounts        Account[]
  sessions        Session[]
  products        Product[]
  coupons         Coupon[]
  activeCartId    String?   @db.ObjectId
  carts           Cart[]
  lists           List[]
  orders          Order[]
  rates           Rate[]
  requests        Request[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  description String
  price       Float
  quantity    Int
  image       Image[]
  sold        Int        @default(0)
  rating      Float      @default(0)
  ratingCount Int        @default(0)
  cartItems   CartItem[]
  vendorId    String     @db.ObjectId
  vendor      User       @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId     String     @db.ObjectId
  brand       Brand      @relation(fields: [brandId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId  String     @db.ObjectId
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  listsId     String[]   @db.ObjectId
  lists       List[]     @relation(fields: [listsId], references: [id])
  rates       Rate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  slug     String    @unique
  image    Image?
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  path     String    @unique
  parent   String
  image    Image?
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  code        String     @unique
  name        String?
  description String?
  type        CouponType @default(vendor)
  value       Float
  minAmount   Float      @default(0)
  maxAmount   Float
  startDate   DateTime   @default(now())
  endDate     DateTime
  isActive    Boolean    @default(true)
  cartsId     String[]   @db.ObjectId
  carts       Cart[]     @relation(fields: [cartsId], references: [id])
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @unique @db.ObjectId
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponsId  String[]   @db.ObjectId
  coupons    Coupon[]   @relation(fields: [couponsId], references: [id])
  bill       Float
  billBefore Float
  items      Item[]
  cartItems  CartItem[]
  order      Order?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int
  priceAfter Float
  cartId     String  @db.ObjectId
  productId  String  @db.ObjectId
  cart       Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model List {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productsId  String[]  @db.ObjectId
  Products    Product[] @relation(fields: [productsId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model Order {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  code    String @unique
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId  String @unique @db.ObjectId
  cart    Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address String
  phone   String
  email   String
  status  Status @default(pending)
  payment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, cartId])
}

model Rate {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  rate      Float
  comment   String?
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Request {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  type    String
  userId  String        @db.ObjectId
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  details String
  status  RequestStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  type    String
  token   String   @unique
  expires DateTime
  userId  String   @db.ObjectId
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
