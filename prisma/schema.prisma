// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  male
  female
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String?
  email           String    @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  phoneNumber     String?
  address         String?
  birthday        DateTime?
  businessAddress String?
  websiteAddress  String?
  code            String?
  token           String?
  expireAt        DateTime?
  isBanned        Boolean   @default(false)
  isAdmin         Boolean   @default(false)
  isVendor        Boolean   @default(false)
  isSupport       Boolean   @default(false)
  isVerified      Boolean   @default(false)
  gender          Gender?
  accounts        Account[]
  sessions        Session[]
  products        Product[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  description String
  price       Float
  quantity    Int
  image       String[]
  sold        Int       @default(0)
  rating      Float     @default(0)
  ratingCount Int       @default(0)
  vendorId    String    @db.ObjectId
  brandId     String?   @db.ObjectId
  categoryId  String?   @db.ObjectId
  vendor      User      @relation(fields: [vendorId], references: [id])
  brand       Brand?    @relation(fields: [brandId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  slug     String    @unique
  image    String?
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String     @unique
  image         String?
  isPredecessor Boolean    @default(false)
  predecessorId String?    @db.ObjectId
  predecessor   Category?  @relation("BlogOwnerHistory", fields: [predecessorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  successors    Category[] @relation("BlogOwnerHistory")
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
